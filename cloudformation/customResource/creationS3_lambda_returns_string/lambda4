Resources:
  Lambda4Function:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt Lambda4ExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import logging
          import urllib3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")

              # Check all necessary fields and log any issues
              required_fields = ['RequestType', 'ResponseURL', 'StackId', 'RequestId', 'LogicalResourceId']
              for field in required_fields:
                  if field not in event or event[field] is None:
                      logger.error(f"Missing or null field: {field}")
                      raise ValueError(f"Missing or null field: {field}")

              # If all fields are good, prepare the response
              request_type = event.get('RequestType', 'Unknown')
              response_data = {
                  'Message': f"RequestType: {request_type}, Hello from Lambda4!"
              }
              
              # Send the CloudFormation response
              send_response(event, context, "SUCCESS", response_data)

          def send_response(event, context, status, response_data):
              response_url = event['ResponseURL']
              logger.info(f"Response URL: {response_url}")

              response_body = {
                  "Status": status,
                  "Reason": f"See the details in CloudWatch Log Stream: {context.log_stream_name}",
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event['StackId'],
                  "RequestId": event['RequestId'],
                  "LogicalResourceId": event['LogicalResourceId'],
                  "Data": response_data
              }

              json_response_body = json.dumps(response_body)
              logger.info(f"Response body: {json_response_body}")

              http = urllib3.PoolManager()
              try:
                  response = http.request('PUT', response_url, body=json_response_body, headers={'Content-Type': 'application/json'})
                  logger.info(f"Response status: {response.status}")
              except Exception as e:
                  logger.error(f"Failed to send response: {str(e)}")
                  raise

  Lambda4ExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "Lambda4BasicExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

Outputs:
  Lambda4FunctionArn:
    Description: "The ARN of the Lambda4 function."
    Value: !GetAtt Lambda4Function.Arn

